"use strict";(()=>{var e={};e.id=325,e.ids=[325],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4409:(e,t,n)=>{n.r(t),n.d(t,{headerHooks:()=>v,originalPathname:()=>I,patchFetch:()=>E,requestAsyncStorage:()=>f,routeModule:()=>z,serverHooks:()=>P,staticGenerationAsyncStorage:()=>g,staticGenerationBailout:()=>A});var i={};n.r(i),n.d(i,{DELETE:()=>w,GET:()=>m,POST:()=>y,PUT:()=>h});var a=n(5419),s=n(9108),r=n(9678),o=n(8070),c=n(2196),u=n(1906),l=n(2177);let d=c.z.object({name:c.z.string(),type:c.z.string(),location:c.z.string(),status:c.z.enum(["active","inactive","maintenance"]),zoneId:c.z.string(),settings:c.z.any().optional()}),p=l.PaginationSchema.extend({name:c.z.string().optional(),type:c.z.string().optional(),location:c.z.string().optional(),status:c.z.enum(["active","inactive","maintenance"]).optional(),zoneId:c.z.string().optional()});async function m(e){return(0,l.withAuth)(async()=>{let{searchParams:t}=new URL(e.url),n=(0,l.parseQueryParams)(t,p),i={...n.name&&{name:{contains:n.name}},...n.type&&{type:n.type},...n.location&&{location:n.location},...n.status&&{status:n.status},...n.zoneId&&{zoneId:n.zoneId}},[a,s]=await Promise.all([u._.accessPoint.count({where:i}),u._.accessPoint.findMany({where:i,take:n.limit||10,skip:n.offset||0,orderBy:{name:"asc"},include:{zone:{select:{id:!0,name:!0,level:!0}}}})]);return(0,l.buildPaginationResponse)(s,a,n.limit||10,n.offset||0)})}async function y(e){return(0,l.withAdminAuth)(async t=>{let n=await e.json(),i=d.parse(n);if(!await u._.securityZone.findUnique({where:{id:i.zoneId}}))throw Error("Security zone not found");let a=await u._.accessPoint.create({data:{...i},include:{zone:{select:{id:!0,name:!0,level:!0}}}});return o.Z.json(a,{status:201})})}async function h(e){return(0,l.withAdminAuth)(async()=>{let{id:t,...n}=await e.json();if(!t)throw Error("Access point ID is required");let i=d.parse(n);if(i.zoneId&&!await u._.securityZone.findUnique({where:{id:i.zoneId}}))throw Error("Security zone not found");return await u._.accessPoint.update({where:{id:t},data:i,include:{zone:{select:{id:!0,name:!0,level:!0}}}})})}async function w(e){return(0,l.withAdminAuth)(async()=>{let{searchParams:t}=new URL(e.url),n=t.get("id");if(!n)throw Error("Access point ID is required");return await u._.accessPoint.delete({where:{id:n}}),{message:"Access point deleted successfully"}})}let z=new a.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/security/access-points/route",pathname:"/api/security/access-points",filename:"route",bundlePath:"app/api/security/access-points/route"},resolvedPagePath:"C:\\Users\\maces\\CernoID-Complete-1\\frontend\\app\\api\\security\\access-points\\route.ts",nextConfigOutput:"",userland:i}),{requestAsyncStorage:f,staticGenerationAsyncStorage:g,serverHooks:P,headerHooks:v,staticGenerationBailout:A}=z,I="/api/security/access-points/route";function E(){return(0,r.patchFetch)({serverHooks:P,staticGenerationAsyncStorage:g})}},2177:(e,t,n)=>{n(8070)},1906:(e,t,n)=>{n.d(t,{_:()=>a});let i=require("@prisma/client"),a=global.prisma||new i.PrismaClient}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),i=t.X(0,[52,765],()=>n(4409));module.exports=i})();