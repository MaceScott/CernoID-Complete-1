"use strict";(()=>{var e={};e.id=391,e.ids=[391],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8881:(e,t,a)=>{a.r(t),a.d(t,{headerHooks:()=>A,originalPathname:()=>I,patchFetch:()=>C,requestAsyncStorage:()=>z,routeModule:()=>f,serverHooks:()=>v,staticGenerationAsyncStorage:()=>g,staticGenerationBailout:()=>P});var n={};a.r(n),a.d(n,{DELETE:()=>w,GET:()=>p,POST:()=>h,PUT:()=>y});var r=a(5419),i=a(9108),o=a(9678),s=a(8070),u=a(2196),c=a(1906),l=a(2177);let d=u.z.object({name:u.z.string(),type:u.z.string(),location:u.z.string(),status:u.z.enum(["active","inactive","maintenance"]),zoneId:u.z.string(),settings:u.z.any().optional()}),m=l.PaginationSchema.extend({name:u.z.string().optional(),type:u.z.string().optional(),location:u.z.string().optional(),status:u.z.enum(["active","inactive","maintenance"]).optional(),zoneId:u.z.string().optional()});async function p(e){return(0,l.withAuth)(async()=>{let{searchParams:t}=new URL(e.url),a=(0,l.parseQueryParams)(t,m),n={...a.name&&{name:{contains:a.name}},...a.type&&{type:a.type},...a.location&&{location:a.location},...a.status&&{status:a.status},...a.zoneId&&{zoneId:a.zoneId}},[r,i]=await Promise.all([c._.camera.count({where:n}),c._.camera.findMany({where:n,take:a.limit||10,skip:a.offset||0,orderBy:{name:"asc"},include:{zone:{select:{id:!0,name:!0,level:!0}},alerts:{where:{status:"open"},select:{id:!0,type:!0,severity:!0,message:!0,createdAt:!0},take:5,orderBy:{createdAt:"desc"}}}})]);return(0,l.buildPaginationResponse)(i,r,a.limit||10,a.offset||0)})}async function h(e){return(0,l.withAdminAuth)(async t=>{let a=await e.json(),n=d.parse(a);if(!await c._.securityZone.findUnique({where:{id:n.zoneId}}))throw Error("Security zone not found");let r=await c._.camera.create({data:{...n},include:{zone:{select:{id:!0,name:!0,level:!0}}}});return s.Z.json(r,{status:201})})}async function y(e){return(0,l.withAdminAuth)(async()=>{let{id:t,...a}=await e.json();if(!t)throw Error("Camera ID is required");let n=d.parse(a);if(n.zoneId&&!await c._.securityZone.findUnique({where:{id:n.zoneId}}))throw Error("Security zone not found");return await c._.camera.update({where:{id:t},data:n,include:{zone:{select:{id:!0,name:!0,level:!0}}}})})}async function w(e){return(0,l.withAdminAuth)(async()=>{let{searchParams:t}=new URL(e.url),a=t.get("id");if(!a)throw Error("Camera ID is required");let n=await c._.camera.findUnique({where:{id:a},include:{alerts:{where:{status:"open"}}}});if(n?.alerts.length)throw Error("Cannot delete camera with open alerts");return await c._.camera.delete({where:{id:a}}),{message:"Camera deleted successfully"}})}let f=new r.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/security/cameras/route",pathname:"/api/security/cameras",filename:"route",bundlePath:"app/api/security/cameras/route"},resolvedPagePath:"C:\\Users\\maces\\CernoID-Complete-1\\frontend\\app\\api\\security\\cameras\\route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:z,staticGenerationAsyncStorage:g,serverHooks:v,headerHooks:A,staticGenerationBailout:P}=f,I="/api/security/cameras/route";function C(){return(0,o.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:g})}},2177:(e,t,a)=>{a(8070)},1906:(e,t,a)=>{a.d(t,{_:()=>r});let n=require("@prisma/client"),r=global.prisma||new n.PrismaClient}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),n=t.X(0,[52,765],()=>a(8881));module.exports=n})();