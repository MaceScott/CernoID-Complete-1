datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  permissions   Permission[]
  cameras       Camera[]    @relation("CameraCreator")
  recognitions  Recognition[]
  accessPoints  AccessPoint[] @relation("AccessPointCreator")
  zones         Zone[]       @relation("ZoneCreator")
  assignedAlerts Alert[]     @relation("AlertAssignee")
  createdAlerts Alert[]     @relation("AlertCreator")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id        String   @id @default(cuid())
  role      String
  resource  String
  action    String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String
  user      User     @relation(fields: [createdBy], references: [id])

  @@unique([role, resource, action, location])
}

model Camera {
  id          String        @id @default(cuid())
  name        String
  url         String
  location    String?
  status      String        @default("offline")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  updatedBy   String
  creator     User          @relation("CameraCreator", fields: [createdBy], references: [id])
  recognitions Recognition[]
  alerts      Alert[]       @relation("CameraAlerts")

  @@index([status])
}

model Recognition {
  id         String   @id @default(cuid())
  userId     String
  cameraId   String
  timestamp  DateTime @default(now())
  confidence Float
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id])
  camera     Camera   @relation(fields: [cameraId], references: [id])

  @@index([userId])
  @@index([cameraId])
  @@index([timestamp])
}

model Zone {
  id          String        @id @default(cuid())
  name        String
  level       Int          @default(1)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  updatedBy   String
  creator     User         @relation("ZoneCreator", fields: [createdBy], references: [id])
  accessPoints AccessPoint[]

  @@index([level])
}

model AccessPoint {
  id          String   @id @default(cuid())
  name        String
  location    String?
  status      String   @default("offline")
  type        String   @default("door")
  lastAccess  DateTime?
  settings    Json?
  zoneId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  creator     User     @relation("AccessPointCreator", fields: [createdBy], references: [id])
  zone        Zone     @relation(fields: [zoneId], references: [id])
  alerts      Alert[]  @relation("AccessPointAlerts")

  @@index([status])
  @@index([type])
  @@index([zoneId])
}

model Alert {
  id          String   @id @default(cuid())
  title       String
  description String?
  severity    String
  status      String   @default("open")
  sourceType  String
  cameraId    String?
  accessPointId String?
  metadata    Json?
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  creator     User     @relation("AlertCreator", fields: [createdBy], references: [id])
  assignedUser User?   @relation("AlertAssignee", fields: [assignedTo], references: [id])
  camera      Camera?  @relation("CameraAlerts", fields: [cameraId], references: [id])
  accessPoint AccessPoint? @relation("AccessPointAlerts", fields: [accessPointId], references: [id])

  @@index([severity])
  @@index([status])
  @@index([sourceType])
  @@index([cameraId])
  @@index([accessPointId])
  @@index([assignedTo])
  @@index([createdAt])
} 