version: '3.8'

services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    volumes:
      - frontend_data:/app/.next
      - ./frontend/public:/app/public:ro
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_TELEMETRY_DISABLED=1
      - HOST=0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cernoid_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_models:/app/models
    environment:
      - ENVIRONMENT=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-cernoid}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cernoid_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-cernoid}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cernoid_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cernoid_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M

volumes:
  frontend_data:
  backend_data:
  backend_logs:
  backend_models:
  postgres_data:
  redis_data:

networks:
  cernoid_network:
    driver: bridge 