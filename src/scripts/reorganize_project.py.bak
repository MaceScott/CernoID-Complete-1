import shutil
from pathlib import Path
import logging
from typing import List, Dict
from datetime import datetime
import sys

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ProjectReorganizer:
    def __init__(self, root_dir: str):
        self.root_dir = Path(root_dir).resolve()
        if not self.root_dir.exists():
            raise ValueError(f"Directory does not exist: {root_dir}")
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_dir = self.root_dir / "backup" / f"backup_{timestamp}"
        self.src_dir = self.root_dir / "src"

    def create_backup(self) -> None:
        """Create backup of current structure"""
        logger.info(f"Creating backup in {self.backup_dir}")
        self.backup_dir.parent.mkdir(parents=True, exist_ok=True)
        if self.src_dir.exists():
            shutil.copytree(self.src_dir, self.backup_dir / "src")
            logger.info("Backup created successfully")

    def create_directory_structure(self) -> None:
        """Create new directory structure"""
        directories = [
            "src/core",
            "src/api",
            "src/models", 
            "src/schemas",
            "src/services",
            "src/utils",
            "src/gui",
            "tests/unit",
            "tests/integration",
            "tests/e2e"
        ]
        
        for directory in directories:
            dir_path = self.root_dir / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"Created directory: {directory}")

    def move_files(self) -> None:
        """Move files to their new locations"""
        moves = [
            # Core modules
            ("src/core/recognition", "src/core/recognition"),
            ("src/core/security", "src/core/security"),
            ("src/core/config", "src/core/config"),
            ("src/core/database", "src/core/database"),
            ("src/core/monitoring", "src/core/monitoring"),
            ("src/core/logging", "src/core/logging"),
            ("src/core/cache", "src/core/cache"),
            ("src/core/events", "src/core/events"),
            ("src/core/utils", "src/core/utils"),
            
            # API structure
            ("src/api/v1/endpoints", "src/api/endpoints"),
            ("src/api/v1/websockets", "src/api/websockets"),
            ("src/api/middleware", "src/api/middleware"),
            ("src/api/routes", "src/api/routes"),
            
            # Models and schemas
            ("src/models", "src/models"),
            ("src/schemas", "src/schemas"),
            
            # Services
            ("src/services", "src/services"),
            ("src/core/services", "src/services/core"),
            
            # GUI components
            ("src/gui", "src/gui"),
            ("src/app/gui", "src/gui/components"),
            ("src/gui/camera", "src/gui/camera"),
            ("src/gui/multi_camera", "src/gui/multi_camera"),
            
            # Tests
            ("src/tests/unit", "tests/unit"),
            ("src/tests/integration", "tests/integration"),
            ("src/tests/e2e", "tests/e2e"),
            ("src/tests/utils", "tests/utils"),
            
            # Utils and scripts
            ("src/scripts", "src/utils/scripts"),
            ("src/core/utils", "src/utils/core"),
            
            # Face recognition specific
            ("src/face_recognition", "src/core/face_recognition"),
            
            # Config files
            ("src/config", "src/core/config"),
            
            # Database
            ("src/database", "src/core/database")
        ]

        # First move core modules to avoid conflicts
        core_moves = [m for m in moves if m[1].startswith("src/core")]
        other_moves = [m for m in moves if not m[1].startswith("src/core")]
        
        # Move in two phases to handle dependencies better
        for move_set in [core_moves, other_moves]:
            for src_path, dest_path in move_set:
                src = self.root_dir / src_path
                dest = self.root_dir / dest_path
                
                if src.exists():
                    if dest.exists() and src != dest:
                        logger.info(f"Merging {src} into {dest}")
                        for item in src.glob('*'):
                            if item.is_file():
                                target = dest / item.name
                                self.safe_move(item, target)
                            else:
                                # For directories, merge recursively
                                self.merge_directories(item, dest / item.name)
                    else:
                        self.safe_move(src, dest)

    def merge_directories(self, src: Path, dest: Path) -> None:
        """Recursively merge directories"""
        if not dest.exists():
            shutil.copytree(src, dest)
            logger.info(f"Copied directory {src} to {dest}")
            return

        for item in src.glob('*'):
            target = dest / item.name
            if item.is_file():
                self.safe_move(item, target)
            else:
                self.merge_directories(item, target)

    def safe_move(self, src: Path, dest: Path) -> bool:
        """Safely move files with error handling"""
        try:
            if src.exists():
                if dest.exists():
                    logger.warning(f"Destination exists, skipping: {dest}")
                    return False
                dest.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(str(src), str(dest))
                logger.info(f"Moved {src} to {dest}")
                return True
            else:
                logger.warning(f"Source does not exist: {src}")
                return False
        except Exception as e:
            logger.error(f"Error moving {src} to {dest}: {e}")
            return False

    def run(self) -> None:
        """Execute the reorganization"""
        try:
            logger.info("Starting project reorganization...")
            self.create_backup()
            self.create_directory_structure()
            self.move_files()
            logger.info("Project reorganization completed successfully")
        except Exception as e:
            logger.error(f"Failed to reorganize project: {e}")
            raise

def main():
    try:
        # Get the project root directory (parent of the scripts directory)
        project_root = Path(__file__).parent.parent.parent
        
        logger.info(f"Project root directory: {project_root}")
        reorganizer = ProjectReorganizer(str(project_root))
        reorganizer.run()
    except Exception as e:
        logger.error(f"Failed to reorganize project: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 