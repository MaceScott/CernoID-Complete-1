from dataclasses import dataclass
import tkinter as tk
from tkinter import filedialog, messagebox
from pathlib import Path
import yaml
import threading
import logging
from typing import List, Optional
import sys
from abc import ABC, abstractmethod

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("app.log")
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class AppConfig:
    """Configuration data class"""
    image_folder: Path
    supported_extensions: List[str] = ("*.jpg", "*.jpeg", "*.png")
    
    @classmethod
    def from_yaml(cls, config_file: Path) -> 'AppConfig':
        """Create config from YAML file"""
        try:
            with open(config_file, "r", encoding="utf-8") as f:
                data = yaml.safe_load(f)
                
            if not data or "IMAGE_FOLDER" not in data:
                raise ValueError("Invalid configuration: IMAGE_FOLDER missing")
                
            image_folder = Path(data["IMAGE_FOLDER"])
            if not image_folder.exists() or not image_folder.is_dir():
                raise ValueError(f"Invalid image folder: {image_folder}")
                
            return cls(image_folder=image_folder)
            
        except Exception as e:
            logger.error("Failed to load configuration", exc_info=True)
            raise ValueError(f"Configuration error: {e}")

class TaskRunner:
    """Handles background task execution"""
    def __init__(self):
        self._threads: List[threading.Thread] = []
        
    def run(self, task: callable):
        """Run task in background thread"""
        def wrapper():
            try:
                task()
            except Exception as e:
                logger.error(f"Task failed: {e}", exc_info=True)
                messagebox.showerror("Error", str(e))
            finally:
                self._cleanup()
                
        thread = threading.Thread(target=wrapper, daemon=True)
        self._threads.append(thread)
        thread.start()
        
    def _cleanup(self):
        """Remove completed threads"""
        self._threads = [t for t in self._threads if t.is_alive()]
        
    def shutdown(self):
        """Wait for threads to complete"""
        for thread in self._threads:
            if thread.is_alive():
                thread.join(timeout=5)

class FaceProcessor(ABC):
    """Abstract base class for face processing operations"""
    @abstractmethod
    def process(self, image_path: Path) -> None:
        pass

class FaceDetector(FaceProcessor):
    """Handles face detection"""
    def process(self, image_path: Path) -> None:
        logger.info(f"Detecting faces in {image_path}")
        # Implement face detection logic
        
class FaceEncoder(FaceProcessor):
    """Handles face encoding"""
    def process(self, image_path: Path) -> None:
        logger.info(f"Encoding faces in {image_path}")
        # Implement face encoding logic
        
class FaceMatcher(FaceProcessor):
    """Handles face matching"""
    def process(self, image1: Path, image2: Path) -> float:
        logger.info(f"Matching faces between {image1} and {image2}")
        # Implement face matching logic
        return 0.0

class CernoIDGUI:
    """Main GUI application"""
    def __init__(self, config: AppConfig):
        self.config = config
        self.task_runner = TaskRunner()
        self.detector = FaceDetector()
        self.encoder = FaceEncoder()
        self.matcher = FaceMatcher()
        
        # Create main window
        self.root = tk.Tk()
        self.root.title("CernoID - Face Recognition System")
        self.root.geometry("600x400")
        self.root.protocol("WM_DELETE_WINDOW", self.on_exit)
        
        self._create_widgets()
        
    def _create_widgets(self):
        """Create GUI elements"""
        # Header
        tk.Label(
            self.root,
            text="CernoID - Face Recognition",
            font=("Arial", 16, "bold")
        ).pack(pady=10)
        
        # Status
        tk.Label(
            self.root,
            text=f"Processing folder: {self.config.image_folder}",
            font=("Arial", 12)
        ).pack(pady=5)
        
        # Action buttons
        actions = [
            ("Detect Faces", self.detect_faces),
            ("Encode Faces", self.encode_faces),
            ("Match Faces", self.match_faces),
            ("Exit", self.on_exit)
        ]
        
        for text, command in actions:
            tk.Button(
                self.root,
                text=text,
                command=command,
                width=20
            ).pack(pady=10)
            
    def detect_faces(self):
        """Handle face detection"""
        self.task_runner.run(
            lambda: self.detector.process(self.config.image_folder)
        )
        
    def encode_faces(self):
        """Handle face encoding"""
        self.task_runner.run(
            lambda: self.encoder.process(self.config.image_folder)
        )
        
    def match_faces(self):
        """Handle face matching"""
        try:
            image1 = Path(filedialog.askopenfilename(title="Select Image 1"))
            image2 = Path(filedialog.askopenfilename(title="Select Image 2"))
            
            if not image1 or not image2:
                raise ValueError("Two images required for matching")
                
            self.task_runner.run(
                lambda: self.matcher.process(image1, image2)
            )
            
        except Exception as e:
            logger.error("Face matching failed", exc_info=True)
            messagebox.showerror("Error", str(e))
            
    def on_exit(self):
        """Clean shutdown"""
        logger.info("Shutting down application")
        self.task_runner.shutdown()
        self.root.quit()
        
    def run(self):
        """Start the application"""
        self.root.mainloop()

def main():
    """Application entry point"""
    try:
        config_file = Path(sys.argv[1] if len(sys.argv) > 1 else "config/config.yaml")
        config = AppConfig.from_yaml(config_file)
        
        app = CernoIDGUI(config)
        app.run()
        
    except Exception as e:
        logger.critical("Application failed to start", exc_info=True)
        messagebox.showerror("Fatal Error", str(e))
        sys.exit(1)

if __name__ == "__main__":
    main()

